#!/usr/bin/env php
<?php

define( 'ERR_NO_REQUIRED_KEYWORD', 'ERROR : Please relate your commit to any issue ( use one of these keywords : issue, #, close,closesclosed,fix,fixes,fixed,feature,resolve,resolves,resolved )' );
define( 'ERR_SUBJECT_REQUIRED', 'The message should contain the `subject` separated from the main text via the empty line' );
define( 'ERR_SUBJECT_TOO_LONG', 'Subject should not contain more than 100 symbols' );
define( 'ERR_SUBJECT_REDUNDANT_DOT', 'Subject should not end with dot' );
define( 'ERR_SUBJECT_WRONG_CASE', 'Subject should start from the capital symbol' );
define( 'ERR_MESSAGE_WRONG_CASE', 'Main message should start from the capital symbol' );
define( 'ERR_MESSAGE_TOO_SHORT', 'Main message length should be at least 30 symbols' );

# Function commit_message_check
# This function is used to check if commit message contains any required keywords
# see @link https://help.github.com/articles/closing-issues-via-commit-messages/
# @param $commit_message
# @author : Kuflievskiy Aleksey <kuflievskiy@gmail.com>
# @version 0.0.1
#
# Plans for future, add more validation rules :
# @todo : Separate subject from body with a blank line
# @todo : Limit the subject line to 100 characters
# @todo : Capitalize the subject line
# @todo : Do not end the subject line with a period
#
function commit_message_check( $commit_message ) {
    $internal_encoding = mb_internal_encoding();
    mb_internal_encoding( 'utf-8' );

    $errors = array();

    $required_keywords = array(
		'issue',
		'close',
		'closes',
		'closed',
		'fix',
		'fixes',
		'fixed',
		'feature',
		'resolve',
		'resolves',
		'resolved',
		'hotfix', // custom
		'#', // custom
    );

    $is_any_keyword_used = false;

    foreach( $required_keywords as $required_keyword ) {
       if ( false !== stristr( $commit_message, $required_keyword ) ) {
          $is_any_keyword_used = true;
       }
    }
    if ( false == $is_any_keyword_used ) {
      $errors[ERR_NO_REQUIRED_KEYWORD] = 1;
    }

	
    $commit_message = trim( preg_replace( '/^#.*$/m', '', $commit_message ) );
	
    $data = explode( "\n\n", $commit_message, 2 );
    if ( 2 !== count( $data ) ) {
        $errors[ERR_SUBJECT_REQUIRED] = 1;
    }

    $subject = trim( @$data[0] );
    if ( $subject !== null ) {
        if ( mb_strlen( $subject ) > 100) {
            $errors[ERR_SUBJECT_TOO_LONG] = 1;
        }
        if ( mb_substr( $subject, -1 ) === '.' ) {
            $errors[ERR_SUBJECT_REDUNDANT_DOT] = 1;
        }
        $subject_first_letter = mb_substr($subject, 0, 1);
        if ( $subject_first_letter !== mb_convert_case( $subject_first_letter, MB_CASE_UPPER ) ) {
            $errors[ERR_SUBJECT_WRONG_CASE] = 1;
        }
    }

    $main_message = trim( @$data[1] );	
	if ( mb_strlen( $subject ) <= 30  && false !== strpos( $subject, 'hotfix' ) ) {
		$errors[ERR_MESSAGE_TOO_SHORT] = 1;
	}
	
    mb_internal_encoding( $internal_encoding );
    return $errors;
}

$errors = commit_message_check( file_get_contents( $argv[1] ) );
if ( count( $errors ) !== 0 ) {
    print sprintf( '%s%s', implode( PHP_EOL, array_keys( $errors ) ), PHP_EOL )
    and exit(1);
}
exit(0);
